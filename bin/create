#!/usr/bin/env node

const debug = require('debug')('apogeu:create');
const path = require('path');
const capitalize = require('capitalize');
const pluralize = require('pluralize');
const log = require('winston');

const paths = require('../src/paths');
const renderTemplate = require('../src/renderTemplate');
const saveTemplate = require('../src/saveTemplate');

const getFilename = fileName => `${fileName.toLowerCase()}.js`;
const getPath = (dir, fileName) => path.join(dir, getFilename(fileName));

module.exports = (type, modelName) => {
  const validator = new RegExp('^[A-Za-z][a-zA-Z0-9]+$');
  modelName = capitalize(modelName.split(' ')[0]);
  if (!validator.test(modelName)) {
    debug('Model name should be composed only by letters and numbers. First char must be a letter.');
  }

  debug(`creating structure for ${modelName} model`);

  const modelNamePlural = pluralize.plural(modelName);

  const model = renderTemplate('model', modelName);
  const controller = renderTemplate('controller', modelNamePlural);
  const service = renderTemplate('service', modelName);
  const middleware = renderTemplate('middleware', modelName);

  const structure = [];

  switch (type) {
    case 'all':
      structure.push(saveTemplate(model, getPath(paths.models, modelName)));
      structure.push(saveTemplate(controller, getPath(paths.controllers, modelNamePlural)));
      structure.push(saveTemplate(service, getPath(paths.services, modelNamePlural)));
      break;
    case 'middleware':
      structure.push(saveTemplate(middleware, getPath(paths.middlewares, modelName)));
      break;
    case 'controller':
      structure.push(saveTemplate(controller, getPath(paths.controllers, modelNamePlural)));
      break;
    case 'service':
      structure.push(saveTemplate(service, getPath(paths.services, modelNamePlural)));
      break;
    case 'model':
      structure.push(saveTemplate(model, getPath(paths.models, modelName)));
      break;
  }

  Promise
    .all(structure)
    .then(() => debug(`${modelName} structure created`))
    .catch((err) => {
      log.error(err.stack);
      process.exit(1);
    });
};
