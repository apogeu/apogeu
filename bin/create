#!/usr/bin/env node

const debug = require('debug')('apogeu:create');
const path = require('path');
const capitalize = require('capitalize');
const pluralize = require('pluralize');

const logger = require('../src/logger');
const paths = require('../src/paths');
const renderTemplate = require('../src/renderTemplate');
const saveTemplate = require('../src/saveTemplate');

const getFilename = fileName => `${fileName.toLowerCase()}.js`;
const getPath = (dir, fileName) => path.join(dir, getFilename(fileName));

const getTemplate = (options) => {
  const { type, name, crud, dir } = options;
  const template = renderTemplate(type, name, crud);
  return saveTemplate(template, getPath(dir, name));
};

const getTemplateModel = (name, crud) => getTemplate({
  type: 'model',
  dir: paths.models,
  name,
  crud,
});

const getTemplateController = (name, crud) => getTemplate({
  type: 'controller',
  dir: paths.controllers,
  name: pluralize.plural(name),
  crud,
});

const getTemplateService = (name, crud) => getTemplate({
  type: 'service',
  dir: paths.services,
  name: pluralize.plural(name),
  crud,
});

const getTemplateMiddleware = (name, crud) => getTemplate({
  type: 'middleware',
  dir: paths.middlewares,
  name,
  crud,
});

module.exports = (type, modelName, crud) => {
  const validator = new RegExp('^[A-Za-z][a-zA-Z0-9]+$');
  modelName = capitalize(modelName.split(' ')[0]);
  if (!validator.test(modelName)) {
    debug('Model name should be composed only by letters and numbers. First char must be a letter.');
  }

  debug(`creating structure for ${modelName} model`);

  const structure = [];

  switch (type) {
    case 'all':
      structure.push(getTemplateModel(modelName, crud));
      structure.push(getTemplateController(modelName, crud));
      structure.push(getTemplateService(modelName, crud));
      structure.push(getTemplateMiddleware(modelName, crud));
      break;
    case 'middleware':
      structure.push(getTemplateMiddleware(modelName, crud));
      break;
    case 'controller':
      structure.push(getTemplateController(modelName, crud));
      break;
    case 'service':
      structure.push(getTemplateService(modelName, crud));
      break;
    case 'model':
      structure.push(getTemplateModel(modelName, crud));
      break;
  }

  Promise
    .all(structure)
    .then(() => logger.info(`${modelName} structure created`))
    .catch((err) => {
      logger.error(err.stack);
      process.exit(1);
    });
};
